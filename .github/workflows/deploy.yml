name: Deploy

on:
    push:
        branches:
            - main

jobs:
    deploy:
        name: "Plan and Apply"
        runs-on: ubuntu-latest
        environment: staging
        strategy:
            matrix:
                environment: [staging]
        env:
            ENVIRONMENT: ${{ matrix.environment }}
            PROJECT: ${{ vars.PROJECT }}
            REGION: ${{ vars.REGION }}
            TF_VAR_environment: ${{ matrix.environment }}
            TF_VAR_domain: ${{ vars.BASE_DOMAIN }}
            TF_VAR_project: ${{ vars.PROJECT }}
            TF_VAR_region: ${{ vars.REGION }}
            TF_VAR_openai_api_key: ${{ vars.OPENAI_API_KEY }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ vars.REGION }}
              
            - name: Cache Terraform Modules
              uses: actions/cache@v4
              with:
                path: ~/.terraform.d/plugin-cache
                key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
                restore-keys: terraform-${{ runner.os }}-

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: "1.12.1"

            - name: Initialise Terraform            
              run: ./init.sh                

            - name: Terraform Format
              run: terraform fmt -check

            - name: Validate
              run: terraform validate

            - name: Plan
              id: plan
              run: terraform plan -no-color --input=false --out=tfplan
            
            - name: Terraform Apply
              run: terraform apply --auto-approve --input=false "tfplan"

            - name: Update DNS
              env:
                CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
                ZONE_ID: ${{ secrets.ZONE_ID }}
                DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
              run: ./update-dns.sh